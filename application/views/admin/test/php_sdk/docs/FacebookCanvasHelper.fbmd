<card>
# Facebook\Helpers\FacebookCanvasHelper

The `FacebookCanvasHelper` is used to obtain an access token or signed request when working within the context of an [app canvas](https://developers.facebook.com/docs/games/canvas).

~~~
Facebook\Helpers\FacebookCanvasHelper( Facebook\FacebookApp $facebookApp )
~~~
</card>

<card>
## Usage {#usage}

If your app is loaded through Canvas, Facebook sends a POST request to your app with a signed request.  This helper will handle validating and decrypting the signed request.

~~~
use Facebook\Helpers\FacebookCanvasHelper;

$fb = new Facebook\Facebook([
  'app_id' => '{app-id}',
  'app_secret' => '{app-secret}',
  ]);
$facebookApp = $fb->getApp();

$canvasHelper = new FacebookCanvasHelper($facebookApp);
$signedRequest = $canvasHelper->getSignedRequest();

if ($signedRequest) {
  $payload = $signedRequest->getPayload();
  var_dump($payload);
}
~~~

If a user has already authenticated your app, you can also obtain an access token.

~~~
use Facebook\Helpers\FacebookCanvasHelper;
use Facebook\Exceptions\FacebookResponseException;
use Facebook\Exceptions\FacebookSDKException;

$fb = new Facebook\Facebook([
  'app_id' => '{app-id}',
  'app_secret' => '{app-secret}',
  ]);
$facebookApp = $fb->getApp();
$facebookClient = $fb->getClient();

try {
  $canvasHelper = new FacebookCanvasHelper($facebookApp);
  $accessToken = $canvasHelper->getAccessToken($facebookClient);
} catch(FacebookResponseException $e) {
  // When Graph returns an error
  echo 'Graph returned an error: ' . $e->getMessage();
} catch(FacebookSDKException $e) {
  // When validation fails or other local issues
  echo 'Facebook SDK returned an error: ' . $e->getMessage();
}

if (isset($accessToken)) {
  // Logged in.
}
~~~
</card>

<card>
## Instance Methods {#instance-methods}

### __construct() {#construct}
~~~~
public FacebookCanvasHelper __construct( Facebook\FacebookApp $app )
~~~~
Upon instantiation, `FacebookCanvasHelper` validates and decrypts the signed request that was sent via POST if present.
</card>

<card>
### getAccessToken() {#get-access-token}
~~~
public Facebook\AccessToken|null getAccessToken( Facebook\FacebookClient $client )
~~~
Checks the signed request for authentication data and tries to obtain an access token access token.
</card>

<card>
### getUserId() {#get-user-id}
~~~
public string|null getUserId()
~~~
A convenience method for obtaining a user's ID from the signed request if present. This will only return the user's ID if a valid signed request can be obtained and decrypted and the user has already authorized the app.

~~~
$userId = $canvasHelper->getUserId();

if ($userId) {
  // User is logged in
}
~~~

This is equivalent to accessing the user ID from the signed request entity.

~~~
$signedRequest = $canvasHelper->getSignedRequest();

if ($signedRequest) {
  $userId = $signedRequest->getUserId();
  // OR
  $userId = $signedRequest->get('user_id');
}
~~~
</card>

<card>
### getAppData() {#get-app-data}
~~~
public string|null getAppData()
~~~
Gets the value that is set in the `app_data` property if present.
</card>

<card>
### getSignedRequest() {#get-signed-request}
~~~
public Facebook\SignedRequest|null getSignedRequest()
~~~
Returns the signed request as a [`Facebook\SignedRequest`](/docs/php/SignedRequest) entity if present.
</card>

<card>
### getRawSignedRequest() {#get-raw-signed-request}
~~~
public string|null getRawSignedRequest()
~~~
Gets the raw, unencrypted signed request that was sent via POST if present.

Returns a an encrypted signed request as a `string` or `null`.
</card>